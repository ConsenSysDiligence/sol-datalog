    .decl succ(prev: id, next: id) overridable
    .decl succ_first(cId: id, fId: id) overridable

    /// EXPRESSIONS

    // Primitive expressions with nothing inside
    // ---- Identifier
    succ_first(cId, cId) :-
        Identifier(cId).

    // ---- Literal
    succ_first(cId, cId) :-
        Literal(cId).

    // ---- ElementaryTypeNameExpression
    succ_first(etneId, etneId) :-
        ElementaryTypeNameExpression(etneId).

    // ---- UnaryOperation
    succ_first(cId, fId) :-
        UnaryOperation(cId),
        UnaryOperation_subExpression(cId, subExpr),
        succ_first(subExpr, fId).

    succ(prev, next) :-
        UnaryOperation_subExpression(next, prev).

    // TODO: What about the case where we have a function call in the unary??

    // ---- BinaryOperation
    succ_first(cId, fId) :-
        BinaryOperation(cId),
        BinaryOperation_leftExpression(cId, lhsId),
        succ_first(lhsId, fId).

    succ(prev, next) :-
        BinaryOperation(bId),
        BinaryOperation_leftExpression(bId, prev),
        BinaryOperation_rightExpression(bId, rhsId),
        succ_first(rhsId, next).

    succ(prev, next) :-
        BinaryOperation_rightExpression(next, prev).

    // ---- Conditional
    succ_first(cId, fId) :-
        Conditional(cId),
        Conditional_condition(cId, condId),
        succ_first(condId, fId).

    succ(prev, next) :-
        Conditional(cId),
        Conditional_condition(cId, prev),
        Conditional_trueExpression(cId, trueId),
        succ_first(trueId, next).

    succ(prev, next) :-
        Conditional(cId),
        Conditional_condition(cId, prev),
        Conditional_falseExpression(cId, falseId),
        succ_first(falseId, next).

    succ(prev, next) :-
        Conditional_trueExpression(next, prev).

    succ(prev, next) :-
        Conditional_falseExpression(next, prev).

    // ---- Index access
    // TODO: Is the base or index expresion evaluated first?
    // If there is an index expression this is a normal index access
    succ_first(iaId, first) :-
        IndexAccess_baseExpression(iaId, beId),
        IndexAccess_indexExpression(iaId, _, 1),
        succ_first(beId, first).

    succ(prev, next) :-
        IndexAccess_baseExpression(iaId, prev),
        IndexAccess_indexExpression(iaId, ieId, 1),
        succ_first(ieId, next).

    succ(prev, next) :-
        IndexAccess_indexExpression(next, prev, 1).


    // If there is no index expression this is an array type - just consider the whole thing one expression
    succ_first(iaId, iaId) :-
        IndexAccess_indexExpression(iaId, _, 0).

    // ---- IndexRangeAccess
    // TODO: Whats the actual order between base, start and end?
    succ_first(iraId, first) :-
        IndexRangeAccess_baseExpression(iraId, beId),
        succ_first(beId, first).

    // Case 1: Has start and end expressions
    succ(prev, next) :-
        IndexRangeAccess_baseExpression(iraId, prev),
        IndexRangeAccess_startExpression(iraId, startExprId, 1),
        succ_first(startExprId, next).

    succ(prev, next) :-
        IndexRangeAccess_startExpression(iraId, prev, 1),
        IndexRangeAccess_endExpression(iraId, eeId, 1),
        succ_first(eeId, next).

    succ(prev, next) :-
        IndexRangeAccess_endExpression(next, prev, 1).

    // Case 2: Only start expression
    succ(prev, next) :-
        IndexRangeAccess_endExpression(next, _, 0),
        IndexRangeAccess_startExpression(next, prev, 1).

    // Case 3: Only end expression
    succ(prev, next) :-
        IndexRangeAccess_baseExpression(iraId, prev),
        IndexRangeAccess_startExpression(iraId, _, 0),
        IndexRangeAccess_endExpression(iraId, eeId, 1),
        succ_first(eeId, next).

    // Case 4: No start, no end expression
    succ(prev, next) :-
        IndexRangeAccess_baseExpression(next, prev),
        IndexRangeAccess_startExpression(next, _, 0),
        IndexRangeAccess_endExpression(next, _, 0).

    // ---- Assignment
    // TODO: Is the left or right side of the assignment evaluated first?
    succ_first(aId, first) :-
        Assignment_leftHandSide(aId, lhsId),
        succ_first(lhsId, first).

    succ(prev, next) :-
        Assignment_leftHandSide(aId, prev),
        Assignment_rightHandSide(aId, rhsId),
        succ_first(rhsId, next).

    succ(prev, next) :-
        Assignment_rightHandSide(next, prev).

    // ---- FunctionCallOptions
    // TODO: The ordering for FunctionCallOptions is not quite correct.
    // We just enforce that the options are evaluated before the base expression.
    // We don't enforce an ordering between the option expression, or that they are 
    // all evaluated (instead that one of them is non-deterministically evaluted)
    succ_first(fcoptsId, first) :-
        FunctionCallOptions_options(fcoptsId, _, optId),
        succ_first(optId, first).

    succ(prev, next) :-
        FunctionCallOptions_options(fcoptsId, _, prev),
        FunctionCallOptions_expression(fcoptsId, baseId),
        succ_first(baseId, next).


    succ(prev, next) :-
        FunctionCallOptions_expression(next, prev).

    // ---- FunctionCall
    // TODO: Is the callee or arguments evaluated first?
    succ_first(fcId, first) :-
        FunctionCall_expression(fcId, exprId),
        succ_first(exprId, first).

    // Has arguments - after base the whole call executes
    succ(prev, next) :-
        FunctionCall_expression(fcId, prev),
        FunctionCall_arguments(fcId, firstArgId, 0),
        succ_first(firstArgId, next).

    // No arguments case - after base the whole call executes
    succ(prev, next) :-
        FunctionCall_expression(next, prev),
        (!FunctionCall_arguments(next, _, 0)).

    // Ordering between args
    succ(prev, next) :-
        FunctionCall_arguments(fcId, prev, i),
        FunctionCall_arguments(fcId, nextArg, i + 1),
        succ_first(nextArg, next).

    // After last arg whole call executes
    succ(prev, next) :-
        FunctionCall_arguments(next, prev, i),
        (!FunctionCall_arguments(next, _, i + 1)).

    // ---- MemberAccess
    succ_first(maId, first) :-
        MemberAccess_expression(maId, baseId),
        succ_first(baseId, first).

    succ(prev, next) :-
        MemberAccess_expression(next, prev).

    // NewExpression
    succ_first(first, first) :-
        NewExpression(first).

    // Tuple expression
    // TODO: What is the order of evaluation of elements?
    // Case 1: Non-empty tuple
    succ_first(teId, first) :-
        TupleExpression_components(teId, firstCompId, 0, _),
        succ_first(firstCompId, first).

    succ(prev, next) :-
        TupleExpression_components(teId, prev, i, _),
        TupleExpression_components(teId, nextComp, i+1, _),
        succ_first(nextComp, next).

    succ(prev, next) :-
        TupleExpression_components(next, prev, i, _),
        (!TupleExpression_components(next, _, i+1, _)).

    // Case 2: Non-empty tuple
    succ_first(teId, teId) :-
        TupleExpression(teId),
        !TupleExpression_components(teId, _, _, _).

    // Statements succ
    // ---------- HELPERS -------------
    // True if nd is a checked or unchecked block
    .decl isBlock(nd: id) 
    isBlock(nd) :- (Block(nd) ; UncheckedBlock(nd)).

    // True if nd is a "fall-through" statement (i.e. if control-flow may continue to the next statement).
    .decl fallThrough(node: id)
    // Non-block fall-through statements
    fallThrough(id) :-
        Statement(id),
        !(Return(id) ; Break(id) ; Continue(id); RevertStatement(id); Throw(id)).

    // True if nd is a loop statement.
    .decl isLoop(node: id)
    isLoop(id) :- (ForStatement(id) ; WhileStatement(id) ; DoWhileStatement(id)).

    // Return the closest enclosing loop `loopId` to `node`
    .decl enclosingLoop(node: id, loopId: id)
    
    enclosingLoop(id, id) :- isLoop(id).
    enclosingLoop(id, loopId) :- 
        parent(ptId, id),
        (!isLoop(id)),
        enclosingLoop(ptId, loopId).

    // ---------- Statement Relations -------------
    // ---- Block or UncheckedBlock
    // For non-empty blocks the first thing in the first statement is first
    succ_first(bId, first) :-
        (Block_statements(bId, firstStmtId, 0) ; UncheckedBlock_statements(bId, firstStmtId, 0)),
        succ_first(firstStmtId, first).

    // For empty blocks we consider them immediately executed
    succ_first(bId, bId) :-
        ((Block(bId), !Block_statements(bId, _, _)) ; (UncheckedBlock(bId), !UncheckedBlock_statements(bId, _, _))).

    // Control flow goes from one statement to the next in a block, if the prev
    // is fall-through
    succ(prev, next) :-
        Block(bId), Block_statements(bId, prev, i), Block_statements(bId, nextStmt, i+1),
        fallThrough(prev),
        succ_first(nextStmt, next).

    succ(prev, next) :-
        UncheckedBlock(bId), UncheckedBlock_statements(bId, prev, i), UncheckedBlock_statements(bId, nextStmt, i+1),
        fallThrough(prev),
        succ_first(nextStmt, next).

    // The block is considered executed, after the last statement executes, if
    // the last statement is fall-through
    succ(prev, next) :-
        Block_statements(next, prev, i),
        (!Block_statements(next, _, i+1)),
        fallThrough(prev).

    succ(prev, next) :-
        UncheckedBlock_statements(next, prev, i),
        (!UncheckedBlock_statements(next, _, i+1)),
        fallThrough(prev).

    // ---- ExpressionStatement
    succ_first(exprStmtId, first) :-
        ExpressionStatement_expression(exprStmtId, exprId),
        succ_first(exprId, first).

    succ(prev, next) :-
        ExpressionStatement_expression(next, prev).

    // ---- IfStatement
    // The condition executes first in an if statement
    succ_first(ifId, first) :-
        IfStatement_condition(ifId, cId),
        succ_first(cId, first).

    // After the condition the true body may execute
    succ(prev, next) :-
        IfStatement_condition(ifId, prev),
        IfStatement_trueBody(ifId, trueId),
        succ_first(trueId, next).

    // After the condition the false body may execute
    succ(prev, next) :-
        IfStatement_condition(ifId, prev),
        IfStatement_falseBody(ifId, falseId, 1),
        succ_first(falseId, next).

    // After the true body, the whole if statement is considered executed
    succ(prev, next) :-
        IfStatement_trueBody(next, prev).

    // After the false body, the whole if statement is considered executed
    succ(prev, next) :-
        IfStatement_falseBody(next, prev, 1).


    // If there is no false body, after the condition the whole if statement may be executed
    succ(prev, next) :-
        IfStatement_condition(next, prev),
        IfStatement_falseBody(next, _, 0).

    // ---- Break
    succ_first(brId, brId) :-
        Break(brId).

    // After a Break the closest enclosing loop is considered executed
    succ(prev, next) :-
        Break(prev),
        enclosingLoop(prev, next).

    // ---- Continue 
    succ_first(cId, cId) :-
        Continue(cId).

    // After continue, we execute the condition of the closest loop
    // (if its while/do while)
    succ(prev, next) :-
        Continue(prev),
        enclosingLoop(prev, loopId),
        (
            WhileStatement_condition(loopId, condId);
            DoWhileStatement_condition(loopId, condId)
        ),
        succ_first(condId, next).

    // After continue we execute the increment statement if there is one, of the closeset `for` loop 
    succ(prev, next) :-
        Continue(prev),
        enclosingLoop(prev, loopId),
        ForStatement_loopExpression(loopId, loopExpr, 1),
        succ_first(loopExpr, next).

    // After continue we execute the condtion, if there is one, of the closeset `for` loop without an increment statement
    succ(prev, next) :-
        Continue(prev),
        enclosingLoop(prev, loopId),
        ForStatement_loopExpression(loopId, _, 0),
        ForStatement_condition(loopId, cond, 1),
        succ_first(cond, next).

    // After continue we execute the body of the closeset `for` loop without an increment statement or condition
    succ(prev, next) :-
        Continue(prev),
        enclosingLoop(prev, loopId),
        ForStatement_loopExpression(loopId, _, 0),
        ForStatement_condition(loopId, _, 0),
        ForStatement_body(loopId, body),
        succ_first(body, next).

    // ---- WhileStatement
    // Condition is executed first in a while statement
    succ_first(wsId, first) :-
        WhileStatement_condition(wsId, cId),
        succ_first(cId, first).    

    // After the condition we can execute the body
    succ(prev, next) :-
        WhileStatement_condition(wsId, prev),
        WhileStatement_body(wsId, bodyId),
        succ_first(bodyId, next).

    // After the condition we can finish executing the loop
    succ(prev, next) :-
        WhileStatement_condition(next, prev).

    // After the body we execute the condition again
    succ(prev, next) :-
        WhileStatement_body(wsId, prev),
        WhileStatement_condition(wsId, next).

    // ---- DoWhileStatement
    // Execute the body of a do-while statement first
    succ_first(dwId, first) :-
        DoWhileStatement_body(dwId, bodyId),
        succ_first(bodyId, first).

    // After the body we always execute the condition
    succ(prev, next) :-
        DoWhileStatement_body(dwId, prev),
        DoWhileStatement_condition(dwId, condId),
        succ_first(condId, next).

    // After the condition we may execute the body or consider the whole statement executed.
    succ(prev, next) :-
        DoWhileStatement_condition(dwId, prev),
        DoWhileStatement_body(dwId, next).

    succ(prev, next) :-
        DoWhileStatement_condition(next, prev).

    // --- ForStatement
    // If the for has an initialization expr its executed first
    succ_first(fsId, first) :-
        ForStatement_initializationExpression(fsId, ieId, 1),
        succ_first(ieId, first).

    // If the for doesnt have an initialization expr, but has a condition its executed first 
    succ_first(fsId, first) :-
        ForStatement_initializationExpression(fsId, _, 0),
        ForStatement_condition(fsId, cId, 1),
        succ_first(cId, first).

    // If the for doesnt have an initialization expr or a condition, the body is first 
    succ_first(fsId, first) :-
        ForStatement_initializationExpression(fsId, _, 0),
        ForStatement_condition(fsId, _, 0),
        ForStatement_body(fsId, body),
        succ_first(body, first).

    // After an initialization statement we execute the condition (if there is one)
    succ(prev, next) :-
        ForStatement_initializationExpression(fsId, prev, 1),
        ForStatement_condition(fsId, cId, 1),
        succ_first(cId, next).

    // After an initialization statement we execute the body (if there is no condition)
    succ(prev, next) :-
        ForStatement_initializationExpression(fsId, prev, 1),
        ForStatement_condition(fsId, _, 0),
        ForStatement_body(fsId, body),
        succ_first(body, next).

    // After the condition we execute the body
    succ(prev, next) :-
        ForStatement_condition(fsId, prev, 1),
        ForStatement_body(fsId, body),
        succ_first(body, next).

    // After the body we execute the loop expression (if there is one)
    succ(prev, next) :-
        ForStatement_body(fsId, prev),
        ForStatement_loopExpression(fsId, leId, 1),
        succ_first(leId, next).

    // After the body we execute the condition (if there is no loop expression)
    succ(prev, next) :-
        ForStatement_body(fsId, prev),
        ForStatement_loopExpression(fsId, leId, 0),
        ForStatement_condition(fsId, condId, 1),
        succ_first(condId, next).

    // After the body we execute the body again (if there is no loop expression or condition)
    succ(prev, next) :-
        ForStatement_body(fsId, prev),
        ForStatement_loopExpression(fsId, leId, 0),
        ForStatement_condition(fsId, condId, 0),
        succ_first(prev, next).

    // After the loop expression we execute the condition (if there is one)
    succ(prev, next) :-
        ForStatement_loopExpression(fsId, prev, 1),
        ForStatement_condition(fsId, condId, 1),
        succ_first(condId, next).

    // After the loop expression we execute the body (if there is no condition)
    succ(prev, next) :-
        ForStatement_loopExpression(fsId, prev, 1),
        ForStatement_condition(fsId, _, 0),
        ForStatement_body(fsId, body),
        succ_first(body, next).

    // After the condition we may exit the loop
    succ(prev, next) :-
        ForStatement_condition(next, prev, 1).

    // ---- InlineAssembly
    succ_first(iaId, iaId) :-
        InlineAssembly(iaId).
    
    // ---- Return 
    succ_first(retId, first) :-
        Return_expression(retId, exprId, 1),
        succ_first(exprId, first).

    succ_first(retId, retId) :-
        Return_expression(retId, _, 0).

    succ(prev, next) :-
        Return_expression(next, prev, 1).

    // ---- RevertStatement
    succ_first(revId, first) :-
        RevertStatement_errorCall(revId, callId),
        succ_first(callId, first).

    succ(prev, next) :-
        RevertStatement_errorCall(next, prev).

    // ---- Throw
    succ_first(throwId, throwId) :-
        Throw(throwId).

    // ---- TryStatement
    // We first execute the external call in the try
    succ_first(tsId, first) :-
        TryStatement_externalCall(tsId, callId),
        succ_first(callId, first).

    // After the external call in the try we may execute any of the clauses
    succ(prev, next) :-
        TryStatement_externalCall(tsId, prev),
        TryStatement_clauses(tsId, clauseId, _),
        succ_first(clauseId, next).

    // After any of the clauses the whole try/catch is finished
    succ(prev, next) :-
        TryStatement_clauses(next, prev, _).

    // ---- TryCatchClause
    succ_first(tccId, first) :-
        TryCatchClause_block(tccId, blockId),
        succ_first(blockId, first).

    succ(prev, next) :-
        TryCatchClause_block(next, prev).

    // ---- VariableDeclarationStatement
    succ_first(vdsId, first) :-
        VariableDeclarationStatement_initialValue(vdsId, ivId, 1),
        succ_first(ivId, first).

    succ_first(vdsId, vdsId) :-
        VariableDeclarationStatement_initialValue(vdsId, _, 0).

    succ(prev, next) :-
        VariableDeclarationStatement_initialValue(next, prev, 1).

    // --- PlaceholderStatement
    // Note: succ relation doesnt do anything with placehodler statements.
    // We use a higher-level relation to tie toghether placeholders and function
    // modifiers in the context of a particular FunctionDefinition.

    // --- EmitStatement
    succ_first(esId, first) :-
        EmitStatement_eventCall(esId, evCall),
        succ_first(evCall, first).

    succ(prev, next) :-
        EmitStatement_eventCall(next, prev).
