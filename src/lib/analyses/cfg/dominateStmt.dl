.comp DominateStmt : IdGraph {
    .override edge

    // ForStatement
    // Initialization dominates the body when present
    edge(pred, succ) :-
        ForStatement(fsId),
        ForStatement_initializationExpression(fsId, pred, 1),
        ForStatement_body(fsId, succ).

    // Initialization dominates condition check when both present 
    edge(pred, succ) :-
        ForStatement(fsId),
        ForStatement_initializationExpression(fsId, pred, 1),
        ForStatement_condition(fsId, succ, 1).

    // Initialization dominates loop expr when both present 
    edge(pred, succ) :-
        ForStatement(fsId),
        ForStatement_initializationExpression(fsId, pred, 1),
        ForStatement_loopExpression(fsId, succ, 1).

    // All stmts dominating the for dominate the init statement
    edge(pred, succ) :-
        ForStatement(fsId),
        ForStatement_initializationExpression(fsId, succ, 1),
        edge(pred, fsId).

    // No init statement - all stmts dominating the for dominate the body
    edge(pred, succ) :-
        ForStatement(fsId),
        ForStatement_initializationExpression(fsId, _, 0),
        ForStatement_body(fsId, succ),
        edge(pred, fsId).

    // No init statement - all stmts dominating the for dominate condition
    edge(pred, succ) :-
        ForStatement(fsId),
        ForStatement_initializationExpression(fsId, _, 0),
        ForStatement_condition(fsId, succ, 1),
        edge(pred, fsId).

    // No init statement, all stmts dominating the for dominate the loop expr 
    edge(pred, succ) :-
        ForStatement(fsId),
        ForStatement_initializationExpression(fsId, _, 0),
        ForStatement_loopExpression(fsId, succ, 1),
        edge(pred, fsId).

    // Initialization dominates any stmt dominated by the for
    edge(pred, succ) :-
        ForStatement(fsId),
        ForStatement_initializationExpression(fsId, pred, 1),
        edge(fsId, succ).

    // Condition dominates any stmt dominated by the for
    edge(pred, succ) :-
        ForStatement(fsId),
        ForStatement_condition(fsId, pred, 1),
        edge(fsId, succ).

    // Loop body dominates the loop expression
    edge(pred, succ) :-
        ForStatement(fsId),
        ForStatement_body(fsId, pred),
        ForStatement_loopExpression(fsId, succ, 1).

    // TryStatement
    edge(pred, succ) :-
        TryStatement(tId),
        edge(pred, tId),
        TryStatement_clauses(tId, cId, _),
        TryCatchClause_block(cId, succ).

    // BlockStatement
    edge(pred, succ) :-
        Block(bId),
        edge(pred, bId),
        Block_statements(bId, succ, 0).

    edge(pred, succ) :-
        Block(bId),
        Block_statements(bId, pred, i),
        Block_statements(bId, succ, i + 1).

    // UncheckedBlockStatement
    edge(pred, succ) :-
        UncheckedBlock(bId),
        edge(pred, bId),
        UncheckedBlock_statements(bId, succ, 0).

    edge(pred, succ) :-
        UncheckedBlock(bId),
        UncheckedBlock_statements(bId, pred, i),
        UncheckedBlock_statements(bId, succ, i + 1).

    // WhileStatement
    edge(pred, succ) :-
        WhileStatement_body(wId, succ),
        edge(pred, wId).

    // IfStatement
    edge(pred, succ) :-
        IfStatement_trueBody(ifId, succ),
        edge(pred, ifId).

    edge(pred, succ) :-
        IfStatement_falseBody(ifId, succ, 1),
        edge(pred, ifId).

    // DoWhile statement
    edge(pred, succ) :-
        DoWhileStatement_body(dwId, succ),
        edge(pred, dwId).

    // ModifierInvocations
    edge(pred, succ) :-
        FunctionDefinition(id),
        FunctionDefinition_modifiers(id, pred, i),
        modifierInvocation_isModifier(pred),
        FunctionDefinition_modifiers(id, succ, i + 1),
        modifierInvocation_isModifier(pred).

    // ModifierInvocations
    edge(pred, succ) :-
        FunctionDefinition_body(id, succ, 1),
        FunctionDefinition_modifiers(id, pred, i),
        modifierInvocation_isModifier(pred).
}