.comp Dominate : IdGraph {
    .init domStmt = DominateStmt

    /// Dominate inherits from dominateStmt for statements
    edge(pred, succ) :- domStmt.edge(pred, succ).

    /// If statement A dominates statement B, A dominates all expressions in B
    edge(pred, succ) :-
        Statement(pred),
        Statement(B),
        domStmt.edge(pred, B),
        ancestor(B, succ),
        Expression(succ).

    /// All expressions "syntactically" inside a statement must evaluate before its
    /// conisdered "executed"
    edge(pred, succ) :-
        Statement(succ),
        ancestor(succ, pred),
        Expression(pred).

    /// All expressions "syntactically" inside another expression must finish evaluating
    /// before the parent expression has evaluated
    edge(pred, succ) :-
        Expression(succ),
        ancestor(succ, pred),
        Expression(pred).

    /// Assignment - right hand side before left
    edge(pred, succ) :-
        Assignment(aid),
        Assignment_leftHandSide(aid, succ),
        Assignment_rightHandSide(aid, pred).

    /// BinaryOperation - left to right order
    edge(pred, succ) :-
        BinaryOperation(boId),
        BinaryOperation_leftExpression(boId, pred),
        BinaryOperation_rightExpression(boId, succ).

    /// Conditional - condition before branches
    edge(pred, succ) :-
        Conditional(cId),
        Conditional_condition(cId, pred),
        Conditional_trueExpression(cId, succ).

    /// Conditional - condition before branches
    edge(pred, succ) :-
        Conditional(cId),
        Conditional_condition(cId, pred),
        Conditional_falseExpression(cId, succ).


    /// FunctionCall - arguments in left-to-right order
    edge(pred, succ) :-
        FunctionCall(fcId),
        FunctionCall_arguments(fcId, pred, i),
        FunctionCall_arguments(fcId, succ, i + 1).

    /// IndexAccess index before base
    edge(pred, succ) :-
        IndexAccess(iaId),
        IndexAccess_baseExpression(aId, succ),
        IndexAccess_indexExpression(iaId, pred, 1).

    /// IndexRangeAccess - start before base
    edge(pred, succ) :-
        IndexRangeAccess(iraId), 
        IndexRangeAccess_baseExpression(iraId, succ),
        IndexRangeAccess_startExpression(iraId, pred, 1).

    /// IndexRangeAccess - end before base
    edge(pred, succ) :-
        IndexRangeAccess(iraId), 
        IndexRangeAccess_baseExpression(iraId, succ),
        IndexRangeAccess_endExpression(iraId, pred, 1).

    /// TupleExpression - left to right order
    edge(pred, succ) :-
        TupleExpression(tId),
        TupleExpression_components(tId, pred, i, _),
        TupleExpression_components(tId, succ, i + 1, _).

    .decl dominate(pred: id, succ: id)
    dominate(pred, succ) :- path(pred, succ, _).

    .decl dominateStmt(pred: id, succ: id)
    dominateStmt(pred, succ) :- domStmt.path(pred, succ, _).
}