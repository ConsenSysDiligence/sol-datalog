.decl internalCall(id: FunctionCallId)
internalCall(id) :- FunctionCall(id), !externalCall(id).

// Compute all pairs of nodes (ancestorId, descendantId) where descendantId is a descendant ot ancestorId in the AST.
.decl ancestor(ancestorId: id, descendantId: id)

ancestor(x, y) :- parent(x, y).
ancestor(x, y) :- parent(x, z), ancestor(z, y).

// Helper to get the name of a state var with a given id
.decl stateVar(id: id, name: symbol)
stateVar(id, name) :- VariableDeclaration(id), VariableDeclaration_name(id, name), VariableDeclaration_stateVariable(id, 1).

// Helper to get the name of a function with a given id
.decl function(id: id, name: symbol)
function(id, name) :- FunctionDefinition(id), FunctionDefinition_name(id, name).

// Helper to get the name of a function with a given id in a given contract (contractId)
.decl functionIn(id: FunctionDefinitionId, name: symbol, contractId: id)
functionIn(id, name, contractId) :- function(id, name), FunctionDefinition_scope(id, contractId).

// Helper to get the name of a contract with a given id
.decl contract(id: id, name: symbol)
contract(id, name) :- ContractDefinition(id), ContractDefinition_name(id, name).

/// Specifies that a method with `methodId` belongs to contract `contractId` or one of its bases.
.decl method(methodId: FunctionDefinitionId, contractId: ContractDefinitionId)
method(methodId, contractId) :- inh.inherits(contractId, baseId), functionIn(methodId, _, baseId).

.decl ModifierInvocation_vReferencedDeclaration(mId: id, rId: id)
ModifierInvocation_vReferencedDeclaration(mId, rId) :-
    ModifierInvocation(mId),
    ModifierInvocation_modifierName(mId, mNameId),
    exprRefersTo(mNameId, rId).

.decl modifierInvocation_isModifier(mid: id)
modifierInvocation_isModifier(mId) :-
    ModifierInvocation(mId),
    ModifierInvocation_vReferencedDeclaration(mId, rId),
    ModifierDefinition(rId).


// Specifies that exprId is an Identifier, IdentifierPath or MemberAccess that refers to defId
.decl exprRefersTo(exprId: id, defId: id)
exprRefersTo(exprId, defId) :-
    Identifier(exprId),
    Identifier_referencedDeclaration(exprId, defId).

exprRefersTo(exprId, defId) :-
    IdentifierPath(exprId),
    IdentifierPath_referencedDeclaration(exprId, defId).

exprRefersTo(exprId, defId) :-
    MemberAccess(exprId),
    MemberAccess_referencedDeclaration(exprId, defId).

// True if nd is a checked or unchecked block
.decl isBlock(nd: id) 
isBlock(nd) :- (Block(nd) ; UncheckedBlock(nd)).