.comp Write {
    // Helper relation specific to Write. Identifies the top-level LValue being modified.
    // Doesnt recurse into member access/indexes.
    .decl LRValueWrite(id: ExpressionId, in: ExpressionId)

    // === Top-level cases:
    // Assignment lhs
    LRValueWrite(x, aId) :-
        Assignment_leftHandSide(aId, x).
        
    // `delete E`
    LRValueWrite(x, uop) :-
        UnaryOperation_operator(uop, "delete"),
        UnaryOperation_subExpression(uop, x).

    // Unary ops - `++`, `--`
    LRValueWrite(x, uop) :-
        (UnaryOperation_operator(uop, "++");
        UnaryOperation_operator(uop, "--")),
        UnaryOperation_subExpression(uop, x).

    // Calls to push/pop
    LRValueWrite(x, call) :-
        FunctionCall_expression(call, callee),
        (MemberAccess_memberName(callee, "push");
        MemberAccess_memberName(callee, "pop")),
        MemberAccess_expression(callee, x).

    // === Inductive cases
    LRValueWrite(x, z) :-
        TupleExpression_components(y, x, _, _),
        LRValueWrite(y, z).

    // writeVar relation identifies that a give `node` writes some `var` with some access shape.
    .decl writesVar(node: id, var: VariableDeclarationId, shape: Shape)

    writesVar(node, var, shape) :-
        LRValueWrite(x, node),
        accessShape(x, var, shape).

    writesVar(node, var, $Var(var)) :-
        VariableDeclarationStatement_assignments(node, var, _, _).

    /// ============== Function/Modifiers ============================
    .decl writesFunction(fun: FunctionDefinitionId, var: VariableDeclarationId, node: id, shape: Shape)
    
    // Function write variable in function body
    writesFunction(fId, var, node, shape) :-
        hasBody(fId, bodyId),
        ancestor(bodyId, node),
        writesVar(node, var, shape).
        
    // Function write variable in modifier body
    writesFunction(fId, var, node, shape) :-
        FunctionDefinition_modifiers(fId, mId, _),
        ModifierInvocation_vReferencedDeclaration(mId, mDefId),
        ModifierDefinition_body(mDefId, bodyId, 1),
        ancestor(bodyId, node),
        writesVar(node, var, shape).
}