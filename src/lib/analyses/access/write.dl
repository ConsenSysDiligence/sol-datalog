.comp Write {
    /// ============== EXPRESSIONS ============================
    /// Specifies whether the variable vId may be modified while evaluating the
    /// expression eId
    .decl writeExpr(eId: ExpressionId, vId: VariableDeclarationId)


    /// ============== writeAssignmentLhs helper ============================
    /// Helper relation for whether a variable id is written on the LHS of an assignment
    .decl writeAssignmentLhs(eId: ExpressionId, vId: VariableDeclarationId)

    /// In `a[E] =...` stuff in a is written
    writeAssignmentLhs(eId, vId) :-
        IndexAccess_baseExpression(eId, baseId), writeAssignmentLhs(baseId, vId).

    /// TODO: In `foo(args) = ...` we need alias analysis to figure out what was written

    /// In the special case `a.push() = ...` a is written
    writeAssignmentLhs(eId, vId) :-
        FunctionCall_expression(eId, calleeId),
        MemberAccess_memberName(calleeId, "push"),
        MemberAccess_referencedDeclaration(calleeId, -1),
        MemberAccess_expression(calleeId, baseId),
        writeAssignmentLhs(baseId, vId).

    /// Recursive case for member access
    writeAssignmentLhs(eId, vId) :-
        MemberAccess_expression(eId, subExpressionId), writeAssignmentLhs(subExpressionId, vId).

    /// Recursive case for tuples
    writeAssignmentLhs(eId, vId) :-
        TupleExpression_components(eId, compId, _, _), writeAssignmentLhs(compId, vId).

    writeAssignmentLhs(eId, vId) :-
        Identifier_referencedDeclaration(eId, vId), VariableDeclaration(vId).

    writeAssignmentLhs(eId, vId) :-
        MemberAccess_referencedDeclaration(eId, vId), VariableDeclaration(vId).

    /// ============== writeExpr ============================

    writeExpr(eId, vId) :-
        Assignment_rightHandSide(eId, rhsId), writeExpr(rhsId, vId).

    writeExpr(eId, vId) :-
        Assignment_leftHandSide(eId, rhsId), writeAssignmentLhs(rhsId, vId).

    writeExpr(eId, vId) :-
        BinaryOperation_leftExpression(eId, lId), writeExpr(lId, vId).

    writeExpr(eId, vId) :-
        BinaryOperation_rightExpression(eId, rId), writeExpr(rId, vId).

    writeExpr(eId, vId) :-
        FunctionCall_expression(eId, calleeId), writeExpr(calleeId, vId).

    writeExpr(eId, vId) :-
        FunctionCall_arguments(eId, argId, _), writeExpr(argId, vId).

    writeExpr(eId, vId) :-
        Conditional_condition(eId, cId), writeExpr(cId, vId).

    writeExpr(eId, vId) :-
        Conditional_falseExpression(eId, fId), writeExpr(fId, vId).

    writeExpr(eId, vId) :-
        Conditional_trueExpression(eId, tId), writeExpr(tId, vId).

    writeExpr(eId, vId) :-
        FunctionCallOptions_expression(eId, subId), writeExpr(subId, vId).

    writeExpr(eId, vId) :-
        FunctionCallOptions_options(eId, _, optId), writeExpr(optId, vId).

    writeExpr(eId, vId) :-
        UnaryOperation_subExpression(eId, subId),
        UnaryOperation_operator(eId, operator), operator != "delete",
        writeExpr(subId, vId).

    writeExpr(eId, vId) :-
        UnaryOperation_subExpression(eId, subId),
        UnaryOperation_operator(eId, operator), operator = "delete",
        writeAssignmentLhs(subId, vId).

    writeExpr(eId, vId) :-
        UnaryOperation_operator(eId, "++"), UnaryOperation_subExpression(eId, subId), writeAssignmentLhs(subId, vId).

    writeExpr(eId, vId) :-
        UnaryOperation_operator(eId, "--"), UnaryOperation_subExpression(eId, subId), writeAssignmentLhs(subId, vId).

    writeExpr(eId, vId) :-
        IndexAccess_baseExpression(eId, bId), writeExpr(bId, vId).

    writeExpr(eId, vId) :-
        IndexAccess_indexExpression(eId, iId, 1), writeExpr(iId, vId).

    writeExpr(eId, vId) :-
        MemberAccess_expression(eId, baseId), writeExpr(baseId, vId).

    writeExpr(eId, vId) :-
        TupleExpression_components(eId, compId, _, _), writeExpr(compId, vId).

    writeExpr(eId, vId) :-
        IndexRangeAccess_baseExpression(eId, baseId), writeExpr(baseId, vId).

    writeExpr(eId, vId) :-
        IndexRangeAccess_startExpression(eId, sId, 1), writeExpr(sId, vId).

    writeExpr(eId, vId) :-
        IndexRangeAccess_endExpression(eId, eId, 1), writeExpr(sId, vId).

    /// ============== STATEMENTS ============================
    /// Specifies whether the variable vId may be modified while evaluating the
    /// statement sId
    .decl writeStmt(sId: StatementId, vId: VariableDeclarationId)

    writeStmt(sId, vId) :-
        ForStatement_initializationExpression(sId, subId, 1), writeExpr(subId, vId).

    writeStmt(sId, vId) :-
        ForStatement_condition(sId, subId, 1), writeExpr(subId, vId).

    writeStmt(sId, vId) :-
        ForStatement_loopExpression(sId, subId, 1), writeStmt(subId, vId).

    writeStmt(sId, vId) :-
        ForStatement_body(sId, bodyId), writeStmt(bodyId, vId).

    writeStmt(sId, vId) :-
        TryStatement_externalCall(sId, callId), writeExpr(callId, vId).

    writeStmt(sId, vId) :-
        TryStatement_clauses(sId, clauseId, _), writeStmt(clauseId, vId).

    writeStmt(sId, vId) :-
        EmitStatement_eventCall(sId, callId), writeExpr(callId, vId).

    /// TODO: Do inline assembly!!
    writeStmt(sId, vId) :-
        Block_statements(sId, subId, _), writeStmt(subId, vId).

    writeStmt(sId, vId) :-
        RevertStatement_errorCall(sId, callId), writeExpr(callid, vId).

    writeStmt(sId, vId) :-
        UncheckedBlock_statements(sId, subId, _), writeStmt(subId, vId).

    writeStmt(sId, vId) :-
        Return_expression(sId, exprId, 1), writeExpr(exprId, vId).

    writeStmt(sId, vId) :-
        WhileStatement_condition(sId, condId), writeExpr(condId, vId).

    writeStmt(sId, vId) :-
        WhileStatement_body(sId, bodyId), writeStmt(bodyId, vId).

    writeStmt(sId, vId) :-
        VariableDeclarationStatement_assignments(sId, vId, _, _).

    writeStmt(sId, vId) :-
        IfStatement_condition(sId, cId), writeExpr(cId, vId).

    writeStmt(sId, vId) :-
        IfStatement_trueBody(sId, tId), writeStmt(tId, vId).

    writeStmt(sId, vId) :-
        IfStatement_falseBody(sId, fId, 1), writeStmt(fId, vId).

    writeStmt(sId, vId) :-
        TryCatchClause_block(sId, bId), writeStmt(bId, vId).

    writeStmt(sId, vId) :-
        DoWhileStatement_condition(sId, cId), writeExpr(cId, vId).

    writeStmt(sId, vId) :-
        DoWhileStatement_body(sId, bId), writeStmt(bId, vId).

    writeStmt(sId, vId) :-
        ExpressionStatement_expression(sId, eId), writeExpr(eId, vId).

    /// ============== Function/Modifiers ============================
    .decl writeModifier(mId: ModifierDefinitionId, vId: VariableDeclarationId)
    writeModifier(mId, vId) :-
        ModifierDefinition_body(mId, bodyId, 1), writeStmt(bodyId, vId).

    .decl writeFunction(fId: FunctionDefinitionId, vId: VariableDeclarationId)
    writeFunction(fId, vId) :-
        hasBody(fId, bodyId), writeStmt(bodyId, vId).
        
    writeFunction(fId, vId) :-
        FunctionDefinition_modifiers(fId, mId, _), ModifierInvocation_arguments(mId, eId, _), writeExpr(eId, vId).
}