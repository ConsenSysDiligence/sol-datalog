.comp Write {
    .type WriteNodeId = ExpressionId | StatementId | ModifierDefinitionId | FunctionDefinitionId

    /// ============== EXPRESSIONS ============================
    /// Specifies whether the variable vId may be modified while evaluating the
    /// expression eId
    .decl writes(eId: WriteNodeId, loc: Loc)

    writes(eId, loc) :-
        Assignment_leftHandSide(eId, lhs),
        modifiedLoc(lhs, loc).

    writes(eId, loc) :-
        (UnaryOperation_operator(eId, "++");
         UnaryOperation_operator(eId, "--");
         UnaryOperation_operator(eId, "delete")),
        UnaryOperation_subExpression(eId, subId),
        modifiedLoc(subId, loc).

    writes(eId, loc) :-
        FunctionCall_expression(eId, callee),
        (MemberAccess_memberName(callee, "push");
        MemberAccess_memberName(callee, "pop")),
        MemberAccess_expression(callee, baseE),
        modifiedLoc(baseE, loc).

    /// ============== Statements ============================
    writes(sId, $Var(vId)) :-
        VariableDeclarationStatement_assignments(sId, vId, _, _).

    // Helper relation to unroll the recursive location shapes written by a node.
    // We use it to extract variable identifiers
    .decl writesExpandLoc(id: WriteNodeId, loc: Loc, subLoc: Loc)
    
    writesExpandLoc(id, loc, loc) :-
        writes(id, loc).

    writesExpandLoc(id, loc, baseLoc) :-
        writesExpandLoc(id, loc, subLoc),
        subLoc = $Member(baseLoc, _).

    writesExpandLoc(id, loc, baseLoc) :-
        writesExpandLoc(id, loc, subLoc),
        subLoc = $Index(baseLoc).

    .decl writesVar(id: WriteNodeId, vId: VariableDeclarationId, loc: Loc)
    writesVar(id, vId, loc) :-
        writesExpandLoc(id, loc, $Var(vId)).

    /// ============== Function/Modifiers ============================
    .decl writesFunction(fun: FunctionDefinitionId, var: VariableDeclarationId, node: id, loc: Loc)
    
    // Function write variable in function body
    writesFunction(fId, var, node, loc) :-
        hasBody(fId, bodyId),
        ancestor(bodyId, node),
        writesVar(node, var, loc).
        
    // Function write variable in modifier invocation 
    writesFunction(fId, var, node, loc) :-
        FunctionDefinition_modifiers(fId, mId, _),
        ModifierInvocation_arguments(mId, node, _),
        writesVar(node, var, loc).

    // Function write variable in modifier body
    writesFunction(fId, var, node, loc) :-
        FunctionDefinition_modifiers(fId, mId, _),
        ModifierInvocation_vReferencedDeclaration(mId, mDefId),
        ModifierDefinition_body(mDefId, bodyId, 1),
        ancestor(bodyId, node),
        writesVar(node, var, loc).

}