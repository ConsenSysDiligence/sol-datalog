/// Detector for inconsistent use of msg.detector and _msgDetector(). Should
/// handle inheritance gracefully.

/// HELPERS

// Computes all function with id funId that have `msg.sender` expression with id eId
.decl funHasMsgSenderBuiltin(funId: id, eId: id)
funHasMsgSenderBuiltin(funId, eId) :-
    MemberAccess(eId),
    MemberAccess_expression(eId, baseId),
    MemberAccess_memberName(eId, "sender"),
    Identifier_name(baseId, "msg"),
    ancestor(funId, eId).

// Computes all function with id funId that have `_msgSender` expression with id eId
.decl funHasMsgSenderCall(funId: id, eId: id)
funHasMsgSenderCall(funId, eId) :-
    Identifier_name(eId, "_msgSender"),
    ancestor(funId, eId).

/// MAIN DETECTOR RELATION

/// Compute all methods with id f1 in contracts with id c1 that contain
/// `msg.sender` in expression with id e1, and methods f2 in class c2 that
/// contain `_msgSender` in e2.
.decl msgSenderInconsistency_Detector(c1: id, f1: id, e1: id, c2: id, f2: id, e2: id)
msgSenderInconsistency_Detector(c1, f1, e1, c2, f2, e2) :-
    (c1 = c2 ;
     c1 != c2, inh.inherits(c1, c2);
     c1 != c2, inh.inherits(c2, c1)
    ),
    method(msgSenderId, c1),
    function(msgSenderId, "_msgSender"),
    functionIn(f1, f1Name, c1),
    functionIn(f2, f2Name, c2),
    funHasMsgSenderBuiltin(f1, e1),
    funHasMsgSenderCall(f2, e2),
    f1Name != "_msgSender".